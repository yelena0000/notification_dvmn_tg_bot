import logging
from dotenv import load_dotenv
import os
import requests
import telegram


logging.basicConfig(level=logging.INFO)


def create_verdict_message(user_name, lesson_title, lesson_url, is_negative):
    """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram."""
    result = '‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞.' if is_negative else '‚úÖ –†–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!'
    verdict = ('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–∞–±–æ—Ç–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞ –∏ —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π.'
               if is_negative else '–†–∞–±–æ—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞!')

    return (f'{result}\n\n{user_name}, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä–∏–ª —É—Ä–æ–∫: '
            f'"{lesson_title}"\nüîó {lesson_url}\n{verdict}')


def get_new_reviews(token, last_timestamp):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç Devman API."""
    url = 'https://dvmn.org/api/long_polling/'
    headers = {'Authorization': f'Token {token}'}
    params = {'timestamp': last_timestamp} if last_timestamp else {}

    response = requests.get(url, headers=headers, params=params, timeout=5)
    response.raise_for_status()

    return response.json()


def send_notification_to_tg(response_content, bot, chat_id, user_name):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö."""
    if response_content['status'] == 'found':
        for attempt in response_content['new_attempts']:
            message = create_verdict_message(
                user_name,
                attempt['lesson_title'],
                attempt['lesson_url'],
                attempt['is_negative']
            )
            bot.send_message(chat_id=chat_id, text=message)


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ä–∞–±–æ—Ç."""
    load_dotenv()

    devman_token = os.environ['DEVMAN_TOKEN']
    tg_bot_token = os.environ['TG_BOT_TOKEN']
    tg_chat_id = os.environ['TG_CHAT_ID']

    bot = telegram.Bot(token=tg_bot_token)
    user_name = bot.get_chat(tg_chat_id).first_name

    welcome_message = (
        f'üëã –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø —Å–ª–µ–∂—É –∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Ç–≤–æ–∏—Ö —Ä–∞–±–æ—Ç. '
        f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö —è –æ—Ç–ø—Ä–∞–≤–ª—é, –∫–æ–≥–¥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä–∏—Ç —Ç–≤–æ–π —É—Ä–æ–∫.'
    )

    bot.send_message(chat_id=tg_chat_id, text=welcome_message)

    last_timestamp = None

    while True:
        try:
            response_content = get_new_reviews(devman_token, last_timestamp)
            send_notification_to_tg(response_content, bot, tg_chat_id, user_name)
            last_timestamp = response_content.get('timestamp_to_request')

        except requests.Timeout:
            logging.error('Request timed out during polling')

        except requests.exceptions.ConnectionError:
            logging.error('Connection lost during polling')


if __name__ == '__main__':
    main()
